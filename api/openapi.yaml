openapi: 3.0.3
x-stoplight:
  id: 8zb7wj761t7xl
info:
  title: Vidago Insurance Middleware API
  version: 1.2.7
  description: |
    # Vidago Insurance Middleware API

    Welcome to the Vidago Insurance Middleware API documentation. This API serves as a bridge between your applications and Argos Insurance services, facilitating a seamless and secure multi-step policy registration process.

    ## Overview

    The Vidago Insurance Middleware API allows you to:

    - **Initiate Policy Registration:** Start a new insurance policy registration session.
    - **Submit Policy Details:** Provide necessary information across multiple steps to complete the policy registration.
    - **Process Policy:** Finalize the policy registration and receive a policy folio number.
    - **Retrieve Policy Information:** Access submitted policy details at any step.
    - **Access Catalogs:** Retrieve various catalogs such as occupations, payment methods, and more to support form data validation and population.
    - **Manage Payments:** Handle payment-related operations associated with policy registrations.

    ## Getting Started

    ### Base URL

    The API is accessible at the following base URL:
    ```
    http://localhost:3000/
    ```

    ### Authentication

    Currently, the API does not enforce authentication. However, it is recommended to implement security measures such as API keys or OAuth in production environments to protect sensitive data.

    ### Content Type

    All request and response bodies use the `application/json` content type.

    - **1.1.5:** Replaced `domicilio_igual` with `same_address_as_insured` and updated request structures for steps 4 and 5.
    - **1.0.3:** Added new endpoints for policy processing and enhanced existing functionalities.
    - **1.0.2:** Improved error handling and response messages.
    - **1.0.1:** Initial release with core policy registration and retrieval features.
  contact:
    name: Ukko
    email: support@ukko.mx
    url: 'https://ukko.mx'
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
servers:
  - url: https://vidago.ramonsampayo.com
    description: Production Server
tags:
  - name: Catalogs
    description: Endpoints for retrieving catalogs
  - name: Payments
    description: Endpoints related to payments data.
  - name: Policy Registration
    description: Endpoints related to the multi-step policy registration process.
  - name: Policy Retrieval
    description: Endpoints for retrieving policy registration data.
security: []
paths:
  /api/v1/policy/initiate:
    post:
      operationId: initiatePolicy
      summary: Initiate Policy Registration
      description: Initializes a new policy registration process and returns a unique policy ID.
      responses:
        '201':
          description: Policy registration initiated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  policy_id:
                    type: string
                    description: Unique identifier for the policy registration session.
                    pattern: '^[A-Za-z0-9\-]{1,36}$'
        '401':
          $ref: '#/components/responses/Error401'
      tags:
        - Policy Registration
      x-stoplight:
        id: gi75t8oe1zpj8
  '/api/v1/policy/{policy_id}/step/1':
    patch:
      operationId: submitPolicyStep1
      summary: Submit Policy Step 1
      description: Submits data for Step 1 of the policy registration process.
      parameters:
        - name: policy_id
          in: path
          required: true
          schema:
            type: string
            pattern: '^[A-Za-z0-9\-]{1,36}$'
          description: Unique identifier for the policy registration session.
      requestBody:
        $ref: '#/components/requestBodies/SubmitPolicyStep1'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage200'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'
      tags:
        - Policy Registration
      x-stoplight:
        id: ujw0mpinwfp2c
    get:
      operationId: getPolicyStep1
      summary: Get Policy Step 1
      description: Retrieves the data submitted for Step 1 of the policy registration process.
      parameters:
        - name: policy_id
          in: path
          required: true
          schema:
            type: string
            pattern: '^[A-Za-z0-9\-]{1,36}$'
          description: Unique identifier for the policy registration session.
      responses:
        '200':
          description: Step 1 data retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyStep1JSON'
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'
      tags:
        - Policy Retrieval
      x-stoplight:
        id: m5l5twywoebat
  '/api/v1/policy/{policy_id}/step/2':
    patch:
      operationId: submitPolicyStep2
      summary: Submit Policy Step 2
      description: Submits product and payment method information for Step 2 of the policy registration process.
      parameters:
        - name: policy_id
          in: path
          required: true
          schema:
            type: string
            pattern: '^[A-Za-z0-9\-]{1,36}$'
          description: Unique identifier for the policy registration session.
      requestBody:
        $ref: '#/components/requestBodies/SubmitPolicyStep2'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage200'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'
      tags:
        - Policy Registration
      x-stoplight:
        id: znyu5vulqm7wf
    get:
      operationId: getPolicyStep2
      summary: Get Policy Step 2
      description: Retrieves the product and payment method information submitted for Step 2 of the policy registration process.
      parameters:
        - name: policy_id
          in: path
          required: true
          schema:
            type: string
            pattern: '^[A-Za-z0-9\-]{1,36}$'
          description: Unique identifier for the policy registration session.
      responses:
        '200':
          description: Step 2 data retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyStep2JSON'
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'
      tags:
        - Policy Retrieval
      x-stoplight:
        id: 78p956f1ayboe
  '/api/v1/policy/{policy_id}/step/3':
    patch:
      operationId: submitPolicyStep3
      summary: Submit Policy Step 3
      description: Submits health and physical information for Step 3 of the policy registration process.
      parameters:
        - name: policy_id
          in: path
          required: true
          schema:
            type: string
            pattern: '^[A-Za-z0-9\-]{1,36}$'
          description: Unique identifier for the policy registration session.
      requestBody:
        $ref: '#/components/requestBodies/SubmitPolicyStep3'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage200'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'
      tags:
        - Policy Registration
      x-stoplight:
        id: osqd2ytw2gier
    get:
      operationId: getPolicyStep3
      summary: Get Policy Step 3
      description: Retrieves the health and physical information submitted for Step 3 of the policy registration process.
      parameters:
        - name: policy_id
          in: path
          required: true
          schema:
            type: string
            pattern: '^[A-Za-z0-9\-]{1,36}$'
          description: Unique identifier for the policy registration session.
      responses:
        '200':
          description: Step 3 data retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyStep3JSON'
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'
      tags:
        - Policy Retrieval
      x-stoplight:
        id: 9ch6sj0vo4klp
  '/api/v1/policy/{policy_id}/step/4':
    patch:
      operationId: submitPolicyStep4
      summary: Submit Policy Step 4
      description: Submits policy details for Step 4 of the policy registration process.
      parameters:
        - name: policy_id
          in: path
          required: true
          schema:
            type: string
            pattern: '^[A-Za-z0-9\-]{1,36}$'
          description: Unique identifier for the policy registration session.
      requestBody:
        $ref: '#/components/requestBodies/SubmitPolicyStep4'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage200'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'
      tags:
        - Policy Registration
      x-stoplight:
        id: zchsol4cdemc8
    get:
      operationId: getPolicyStep4
      summary: Get Policy Step 4
      description: Retrieves the policy details submitted for Step 4 of the policy registration process.
      parameters:
        - name: policy_id
          in: path
          required: true
          schema:
            type: string
            pattern: '^[A-Za-z0-9\-]{1,36}$'
          description: Unique identifier for the policy registration session.
      responses:
        '200':
          description: Step 4 data retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyStep4JSON'
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'
      tags:
        - Policy Retrieval
      x-stoplight:
        id: gjx1tci99sv7s
  '/api/v1/policy/{policy_id}/step/5':
    patch:
      operationId: submitPolicyStep5
      summary: Submit Policy Step 5
      description: Submits beneficiary information for Step 5 of the policy registration process.
      parameters:
        - name: policy_id
          in: path
          required: true
          schema:
            type: string
            pattern: '^[A-Za-z0-9\-]{1,36}$'
          description: Unique identifier for the policy registration session.
      requestBody:
        $ref: '#/components/requestBodies/SubmitPolicyStep5'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage200'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'
      tags:
        - Policy Registration
      x-stoplight:
        id: l7bh74pltkavu
    get:
      operationId: getPolicyStep5
      summary: Get Policy Step 5
      description: Retrieves the beneficiary information submitted for Step 5 of the policy registration process.
      parameters:
        - name: policy_id
          in: path
          required: true
          schema:
            type: string
            pattern: '^[A-Za-z0-9\-]{1,36}$'
          description: Unique identifier for the policy registration session.
      responses:
        '200':
          description: Step 5 data retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyStep5JSON'
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'
      tags:
        - Policy Retrieval
      x-stoplight:
        id: 4edac2hxiol6l
  '/api/v1/policy/{policy_id}/step/6':
    patch:
      operationId: submitPolicyStep6
      summary: Submit Policy Step 6
      description: Submits data for Step 6 of the policy registration process.
      parameters:
        - name: policy_id
          in: path
          required: true
          schema:
            type: string
            pattern: '^[A-Za-z0-9\-]{1,36}$'
          description: Unique identifier for the policy registration session.
      requestBody:
        $ref: '#/components/requestBodies/SubmitPolicyStep6'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage200'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'
      tags:
        - Policy Registration
    get:
      operationId: getPolicyStep6
      summary: Get Policy Step 6
      description: Retrieves the data submitted for Step 6 of the policy registration process.
      parameters:
        - name: policy_id
          in: path
          required: true
          schema:
            type: string
            pattern: '^[A-Za-z0-9\-]{1,36}$'
          description: Unique identifier for the policy registration session.
      responses:
        '200':
          description: Step 6 data retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyStep6JSON'
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'
      tags:
        - Policy Retrieval
  '/api/v1/policy/{policy_id}/step/7':
    patch:
      operationId: submitPolicyStep7
      summary: Submit Policy Step 7
      description: Submits billing information for Step 7 of the policy registration process.
      parameters:
        - name: policy_id
          in: path
          required: true
          schema:
            type: string
            pattern: '^[A-Za-z0-9\-]{1,36}$'
          description: Unique identifier for the policy registration session.
      requestBody:
        $ref: '#/components/requestBodies/SubmitPolicyStep7'
      responses:
        '200':
          description: Step 7 data retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingResponseJSON'
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'
      tags:
        - Payments
      x-stoplight:
        id: eftmsf4k7qjfp
  '/api/v1/policy/{policy_id}/steps':
    get:
      operationId: getPolicySteps1to5
      summary: Get Policy Steps 1 to 5
      description: Retrieves the data submitted for Steps 1 to 5 of the policy registration process.
      parameters:
        - name: policy_id
          in: path
          required: true
          schema:
            type: string
            pattern: '^[A-Za-z0-9\-]{1,36}$'
          description: Unique identifier for the policy registration session.
      responses:
        '200':
          description: Steps 1 to 5 data retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicySteps1to5JSON'
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'
      tags:
        - Policy Retrieval
      x-stoplight:
        id: get-steps-1to5
  '/api/v1/policy/{policy_id}/process':
    patch:
      operationId: processPolicy
      summary: Process Policy
      description: Processes the policy and returns the policy folio upon success.
      parameters:
        - name: policy_id
          in: path
          required: true
          schema:
            type: string
            pattern: '^[A-Za-z0-9\-]{1,36}$'
          description: Unique identifier for the policy registration session.
      responses:
        '200':
          description: Policy processed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessPolicyResponse'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'
      tags:
        - Policy Registration
      x-stoplight:
        id: uhnyln96g4xb0
  /api/v1/occupations:
    get:
      operationId: occupationsList
      summary: Get Occupations List
      description: Retrieves a list of available occupations.
      responses:
        '200':
          description: Occupations list retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OccupationJSON'
      tags:
        - Catalogs
      x-stoplight:
        id: lt6cwzh9x7dwj
  /api/v1/catalogs:
    get:
      operationId: catalogs
      summary: Get Catalogs
      description: Returns a list of available catalogs.
      parameters:
        - name: catalog_type
          in: query
          description: 'Name of the catalog. Allowed values are: - BANCOS_PARTICIPANTES - DEPORTES_PELIGROSOS - KINSHIP - COUNTRIES - BANNED_COUNTRIES - STATES'
          required: true
          schema:
            type: string
            enum:
              - BANCOS_PARTICIPANTES
              - DEPORTES_PELIGROSOS
              - KINSHIP
              - COUNTRIES
              - BANNED_COUNTRIES
              - STATES
      responses:
        '200':
          description: Catalog retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OptionJSON'
      tags:
        - Catalogs
      x-stoplight:
        id: wfblpm5jvci6h
  /api/v1/plans:
    get:
      security: []
      operationId: Plans
      summary: Retrieve a list of insurance plans
      description: |
        Retrieves a list of available insurance plans based on the provided filters. 
        You can filter the plans using either `policy_id` **or** other filtering parameters (`age`, `birth_date`, `risk`, `payment_method`).

        **Note:** `policy_id` cannot be combined with other filtering parameters.
      tags:
        - Catalogs
      parameters:
        - name: policy_id
          in: query
          description: |
            The unique identifier for an existing insurance policy. 
            Cannot be combined with other filters (`age`, `birth_date`, `risk`, `payment_method`).
          required: false
          schema:
            type: string
            example: '12345'
            pattern: '^[A-Za-z0-9\-]{1,36}$'
        - name: age
          in: query
          description: |
            The age of the insured. 
            Required if `policy_id` is not provided.
          required: false
          schema:
            type: integer
            minimum: 0
            example: 30
        - name: birth_date
          in: query
          description: |
            The birth date of the insured in `YYYY-MM-DD` format. 
            Used to calculate age if `age` is not provided.
          required: false
          schema:
            type: string
            format: date
            example: '1988-08-29'
            pattern: '^\d{4}-\d{2}-\d{2}$'
        - name: risk
          in: query
          description: The risk level associated with the insured.
          required: false
          schema:
            type: string
            enum:
              - NORMAL
              - SUBNORMAL
            pattern: '^(NORMAL|SUBNORMAL)$'
            example: 'NORMAL'
        - name: payment_method
          in: query
          description: The preferred payment method.
          required: false
          schema:
            type: string
            enum:
              - MENSUAL
              - ANUAL
            pattern: '^(MENSUAL|ANUAL)$'
            example: 'MENSUAL'
      responses:
        '200':
          description: A list of available insurance plans
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPlansResponse'
              examples:
                example-1:
                  value:
                    plans:
                      - id: '001'
                        product_name: BASIC001
                        full_name: Basico
                        payment_methods:
                          - payment_method: MENSUAL
                            premium: 250
                          - payment_method: ANUAL
                            premium: 2800
                        coverages:
                          - name: Health
                            insured_amount: 50000
                          - name: Accident
                            insured_amount: 100000
                      - id: '002'
                        product_name: PREM002
                        full_name: Premium
                        payment_methods:
                          - payment_method: MENSUAL
                            premium: 350
                          - payment_method: ANUAL
                            premium: 4000
                        coverages:
                          - name: Health
                            insured_amount: 100000
                          - name: Accident
                            insured_amount: 200000
        '400':
          description: Bad Request - Validation errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorJSON'
              examples:
                example-1:
                  value:
                    status: false
                    message: "Cannot provide policy_id with other filtering parameters."
                example-2:
                  value:
                    status: false
                    message: "Invalid birth_date format. Expected YYYY-MM-DD."
        '404':
          description: Not Found - Insurance policy not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorJSON'
              examples:
                example-1:
                  value:
                    status: false
                    message: "Insurance policy not found."
        '422':
          description: Unprocessable Entity - Missing or invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorJSON'
              examples:
                example-1:
                  value:
                    status: false
                    message: "Age not set for the insurance policy."
                example-2:
                  value:
                    status: false
                    message: "Risk information is missing for the insurance policy."
      x-stoplight:
        id: updated-get-plans
  '/api/v1/postalCodes/{postal_code}':
    get:
      operationId: getLocationByPostalCode
      summary: Retrieve Location Details by Postal Code
      description: 'Retrieves the municipality, city, state, country, and an array of neighborhoods associated with the provided postal code.'
      parameters:
        - name: postal_code
          in: path
          required: true
          schema:
            type: string
            pattern: '^\d{5}$'
          description: The 5-digit postal code.
      responses:
        '200':
          description: Location details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostalCodeLookupResponseJSON'
              examples:
                example-1:
                  value:
                    municipality: Nezahualcoyotl
                    city: Nezahualcoyotl
                    state_address: Mexico
                    country: Mexico
                    neighborhoods:
                      - Benito Juarez
                      - Centro
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'
      tags:
        - Catalogs
components:
  securitySchemes:
    BearerToken:
      type: http
      scheme: bearer
      bearerFormat: custom
  requestBodies:
    SubmitPolicyStep1:
      description: Submits data for Step 1 of the policy registration process.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PolicyStep1JSON'
          example:
            name: RODRIGO
            first_surname: PEREZ
            second_surname: LOPEZ
            birth_date: '1990-12-30'
            phone_1: '5555555555'
            email: mcoria@segurosargos.com
            argos_occupation_id: '1'
    SubmitPolicyStep2:
      description: Submits product and payment method information for Step 2 of the policy registration process.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PolicyStep2JSON'
          example:
            product_name: PLAN500
            payment_method: MENSUAL
            insured_amount: 500000
            premium: 250
    SubmitPolicyStep3:
      description: Submits health and physical information for Step 3 of the policy registration process.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PolicyStep3JSON'
          example:
            question_1: false
            question_2: false
            height: 1.7
            weight: 70
    SubmitPolicyStep4:
      description: Submits policy details for Step 4 of the policy registration process.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              insurance_policy:
                $ref: '#/components/schemas/PolicyStep4JSON'
          example:
            country_of_birth: Mexico
            rfc: LOPR880829KB5
            gender: '1'
            marital_status: '2'
            location_address_attributes:
              street: GLADIOLAS
              exterior_number: '99'
              interior_number: ''
              neighborhood: JARDIN
              delegation: ''
              municipality: MATAMOROS
              city: Nezahualcoyotl
              federal_entity: ''
              state: Tamaulipas
              province: ''
              department: ''
              postal_code: '57000'
              country: Mexico
    SubmitPolicyStep5:
      description: Submits beneficiary information for Step 5 of the policy registration process.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              beneficiary:
                $ref: '#/components/schemas/PolicyStep5JSON'
          example:
            beneficiary:
              same_address_as_insured: false
              name: IVONNE
              first_surname: SOTO
              second_surname: VEGA
              relationship: Cónyuge
              birth_date: '1990-12-30'
              percentage: 100
              location_address_attributes:
                street: AVENIDA CENTRAL
                exterior_number: '200'
                interior_number: ''
                neighborhood: Benito Juarez
                delegation: ''
                municipality: Nezahualcoyotl
                city: Nezahualcoyotl
                federal_entity: ''
                state: Puebla
                province: ''
                department: ''
                postal_code: '57000'
                country: Mexico
    SubmitPolicyStep6:
      description: Submits data for Step 6 of the policy registration process.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              insurance_policies_step6:
                $ref: '#/components/schemas/PolicyStep6JSON'
          example:
            insurance_policies_step6:
              pld_attributes:
                declaration_relationship: "Padre/Madre"
                insured_pays: false
                other_nationality_residence: false
                other_nationality_residence_details: "Canadá"
                pays_taxes_in_other_country: false
                pays_taxes_in_other_country_details: "Estados Unidos"
                insured_government_position: true
                relatives_government_position: true
                insured_natural_person: false
                insured_commercial_ties: false
                insured_commercial_ties_country: "Brasil, Argentina"
                other_nationality_residence_contractor: false
                other_nationality_residence_contractor_details: "Francia"
                pays_taxes_in_other_country_contractor: false
                pays_taxes_in_other_country_contractor_details: "Alemania"
                contractor_government_position: true
                contractor_relatives_government_position: true
                contractor_natural_person: false
                contractor_commercial_ties: false
                contractor_commercial_ties_country: "Chile, Perú"
                signed_declaration: true
                accepted_privacy_notice: true
                accepted_terms_conditions: true
                relatives_government_positions_attributes:
                  - position: "Diputado Federal"
                    department: "Cámara de Diputados"
                    role: "insured"
                  - name: "María López"
                    relationship: "Hermano/Hermana"
                    position: "Secretario de Salud"
                    department: "Secretaría de Salud"
                    role: "relative"
                  - position: "Embajador"
                    department: "Secretaría de Relaciones Exteriores"
                    role: "contractor"
                  - name: "Carlos Gómez"
                    relationship: "Cónyuge"
                    position: "Ministro de Economía"
                    department: "Secretaría de Economía"
                    role: "contractor_relative"
    SubmitPolicyStep7:
      description: Submits billing information for Step 7 of the policy registration process.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BillingDataJSON'
          example:
            amount: 1200
            policy_folio: 1001443313
            cardholder: RODRIGO PEREZ
            card_number: '545631906543654'
            expiration_month: '08'
            expiration_year: '25'
            cvv: '123'
            pay_without_interest: true
            issuing_bank: BANCOMER
  responses:
    SuccessMessage200:
      description: Step submitted successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessMessage'
    Error400:
      description: Bad Request - Validation errors.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorJSON'
    Error401:
      description: Unauthorized - Invalid or missing token.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorJSON'
    Error404:
      description: Not Found - Invalid policy_id.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorJSON'
  schemas:
    SuccessMessage:
      type: object
      properties:
        message:
          type: string
          description: Success message.
          pattern: '^.{1,255}$'
      required:
        - message
    PolicySteps1to5JSON:
      type: object
      properties:
        step1:
          $ref: '#/components/schemas/PolicyStep1JSON'
        step2:
          $ref: '#/components/schemas/PolicyStep2JSON'
        step3:
          $ref: '#/components/schemas/PolicyStep3JSON'
        step4:
          $ref: '#/components/schemas/PolicyStep4JSON'
        step5:
          $ref: '#/components/schemas/PolicyStep5JSON'
    PolicyStep1JSON:
      type: object
      required:
        - name
        - first_surname
        - second_surname
        - birth_date
        - phone_1
        - email
        - argos_occupation_id
      properties:
        name:
          type: string
          maxLength: 50
          description: The insured's first name. **Required.**
          pattern: '^[A-Za-zÁÉÍÓÚáéíóúÑñ\s]{1,50}$'
          example: JUAN
        first_surname:
          type: string
          maxLength: 50
          description: The insured's first surname. **Required.**
          pattern: '^[A-Za-zÁÉÍÓÚáéíóúÑñ\s]{1,50}$'
          example: RAMIREZ
        second_surname:
          type: string
          maxLength: 50
          description: The insured's second surname. **Required.**
          pattern: '^[A-Za-zÁÉÍÓÚáéíóúÑñ\s]{1,50}$'
          example: GARCIA
        birth_date:
          type: string
          format: date
          description: The insured's date of birth in YYYY-MM-DD format. **Required.**
          example: '1983-12-01'
        phone_1:
          type: string
          description: The insured's primary contact phone number. **Required.**
          pattern: '^\d{10}$'
          example: '5555555555'
        email:
          type: string
          maxLength: 100
          description: The insured's email address. **Required.**
          format: email
          pattern: '^[^\s@]+@[^\s@]+\.[^\s@]+$'
          example: mcoria@segurosargos.com
        argos_occupation_id:
          type: string
          description: Insured's occupation ID. **Required.**
          pattern: '^\d+$'
          example: '1'
      x-stoplight:
        id: j9hiz99h7xkzl
    PolicyStep2JSON:
      type: object
      required:
        - product_name
        - payment_method
        - insured_amount
        - premium
      properties:
        product_name:
          type: string
          description: Seleccionar entre "PLAN100" (Básico) y "PLAN500" (Premium).
          enum:
            - PLAN100
            - PLAN500
          example: PLAN100
        payment_method:
          type: string
          description: Seleccionar entre "MENSUAL" o "ANUAL".
          enum:
            - MENSUAL
            - ANUAL
          pattern: '^(MENSUAL|ANUAL)$'
          example: MENSUAL
        insured_amount:
          type: integer
          description: Monto de suma asegurada.
          minimum: 1
          maximum: 10000000
          example: 500000
        premium:
          type: integer
          description: Monto de prima a pagar.
          minimum: 1
          maximum: 100000
          example: 250
      x-stoplight:
        id: 0px9yjmz0itsk
    PolicyStep3JSON:
      type: object
      required:
        - question_1
        - question_2
        - height
        - weight
      properties:
        question_1:
          type: boolean
          description: 'Indicate `true` if the insured has suffered certain diseases, otherwise `false`.'
        question_2:
          type: boolean
          description: 'Appears only if `question_1` is `false`. Indicate `true` if the insured practices dangerous sports, otherwise `false`.'
        height:
          type: number
          description: 'Appears if `question_1` is `false`. Height in meters (e.g., 1.70). Values between 1.00 and 2.50 meters.'
          minimum: 1
          maximum: 2.5
          example: 1.7
        weight:
          type: number
          description: 'Appears if `question_1` is `false`. Weight in kilograms. Values between 18 and 200 kg.'
          minimum: 18
          maximum: 200
          example: 70
      x-stoplight:
        id: puw47y9in2gop
    PolicyStep4JSON:
      type: object
      required:
        - country_of_birth
        - rfc
        - gender
        - marital_status
        - location_address_attributes
      properties:
        country_of_birth:
          type: string
          description: Seleccionar el país de nacimiento. Por defecto "Mexico".
          enum:
            - Mexico
            - Otro país
          pattern: '^(Mexico|Otro país)$'
          example: Mexico
        rfc:
          type: string
          description: 'Formato válido de RFC mexicano, 13 caracteres alfanuméricos.'
          pattern: '^[A-ZÑ&]{4}\d{6}[A-Z0-9]{3}$'
          example: LOPR880829KB5
        gender:
          type: string
          description: Seleccionar "1" para Masculino o "2" para Femenino.
          enum:
            - '1'
            - '2'
          pattern: '^(1|2)$'
          example: '1'
        marital_status:
          type: string
          description: 'Opciones: 1-Soltero, 2-Casado, 3-Unión Libre, 4-Divorciado, 5-Viudo.'
          enum:
            - '1'
            - '2'
            - '3'
            - '4'
            - '5'
          pattern: '^[1-5]$'
          example: '2'
        location_address_attributes:
          $ref: '#/components/schemas/LocationAddressAttributes'
      x-stoplight:
        id: 14cyuo6cm8au0
    PolicyStep5JSON:
      type: object
      required:
        - same_address_as_insured
        - name
        - first_surname
        - second_surname
        - relationship
        - birth_date
        - percentage
      properties:
        same_address_as_insured:
          type: boolean
          description: 'Indicate `true` if the beneficiary''s address is the same as the insured, otherwise `false`.'
        name:
          type: string
          description: Nombre del beneficiario.
          pattern: '^[A-Za-zÁÉÍÓÚáéíóúÑñ\s]{1,50}$'
          maxLength: 50
          example: IVONNE
        first_surname:
          type: string
          description: Primer apellido del beneficiario.
          pattern: '^[A-Za-zÁÉÍÓÚáéíóúÑñ\s]{1,50}$'
          maxLength: 50
          example: SOTO
        second_surname:
          type: string
          description: Segundo apellido del beneficiario.
          pattern: '^[A-Za-zÁÉÍÓÚáéíóúÑñ\s]{1,50}$'
          maxLength: 50
          example: VEGA
        relationship:
          type: string
          description: 'Parentesco con el asegurado. Opciones: "Cónyuge", "Hijo/Hija", "Padre/Madre", "Hermano/Hermana".'
          example: Cónyuge
        birth_date:
          type: string
          format: date
          description: The insured's date of birth in YYYY-MM-DD format. **Required.**
          example: '1986-12-01'
        percentage:
          type: integer
          description: Porcentaje asignado al beneficiario.
          minimum: 1
          maximum: 100
          example: 100
        location_address_attributes:
          $ref: '#/components/schemas/LocationAddressAttributes'
      x-stoplight:
        id: 6k4rqbnw9g8fn
    LocationAddressAttributes:
      type: object
      required:
        - street
        - exterior_number
        - postal_code
        - state
        - neighborhood
      properties:
        street:
          type: string
          description: Dirección de la calle. Máximo 100 caracteres.
          pattern: '^[A-Za-zÁÉÍÓÚáéíóúÑñ0-9\s\.,\-]{1,100}$'
          maxLength: 100
          example: FAISANES
        exterior_number:
          type: string
          description: Número exterior. Máximo 10 caracteres.
          pattern: '^[A-Za-z0-9]{1,10}$'
          maxLength: 10
          example: '105'
        interior_number:
          type: string
          description: Número interior. Máximo 10 caracteres.
          pattern: '^[A-Za-z0-9]{0,10}$'
          maxLength: 10
          example: '2B'
        neighborhood:
          type: string
          description: Colonias correspondientes al código postal ingresado.
          enum:
            - Benito Juarez
            - Otra Colonia
          pattern: '^(Benito Juarez|Otra Colonia)$'
          example: Benito Juarez
        delegation:
          type: string
          description: Delegación o alcaldía.
          pattern: '^[A-Za-zÁÉÍÓÚáéíóúÑñ\s]{0,100}$'
          example: None
        municipality:
          type: string
          description: Se completa automáticamente según el código postal.
          pattern: '^[A-Za-zÁÉÍÓÚáéíóúÑñ\s]{1,100}$'
          example: Nezahualcoyotl
        city:
          type: string
          description: Se completa automáticamente según el código postal.
          pattern: '^[A-Za-zÁÉÍÓÚáéíóúÑñ\s]{1,100}$'
          example: Nezahualcoyotl
        federal_entity:
          type: string
          description: Entidad federativa.
          pattern: '^[A-Za-zÁÉÍÓÚáéíóúÑñ\s]{0,100}$'
          example: None
        state:
          type: string
          description: Se completa automáticamente según el código postal.
          pattern: '^[A-Za-zÁÉÍÓÚáéíóúÑñ\s]{1,100}$'
          example: Mexico
        state_code:
          type: string
          description: Se completa automáticamente según el código postal.
          pattern: '^\d{2}$'
          example: "12"
        province:
          type: string
          description: Provincia.
          pattern: '^[A-Za-zÁÉÍÓÚáéíóúÑñ\s]{0,100}$'
          example: None
        department:
          type: string
          description: Departamento.
          pattern: '^[A-Za-zÁÉÍÓÚáéíóúÑñ\s]{0,100}$'
          example: None
        postal_code:
          type: string
          description: Código postal de 5 dígitos.
          pattern: '^\d{5}$'
          maxLength: 5
          example: '57000'
        country:
          type: string
          description: 'Se completa automáticamente, por defecto "Mexico".'
          pattern: '^[A-Za-zÁÉÍÓÚáéíóúÑñ\s]{1,100}$'
          example: Mexico
    PolicyStep6JSON:
      type: object
      required:
        - pld_attributes
      properties:
        pld_attributes:
          type: object
          required:
            - insured_pays
            - other_nationality_residence
            - pays_taxes_in_other_country
            - insured_government_position
            - relatives_government_position
            - insured_natural_person
            - signed_declaration
            - accepted_privacy_notice
            - accepted_terms_conditions
          properties:
            declaration_relationship:
              type: string
              description: 'Applies if `insured_pays` is `false`. Select the relationship with the contractor. Options: Cónyuge, Hijo/Hija, Padre/Madre, Hermano/Hermana, Otro.'
              pattern: '^(Cónyuge|Hijo\/Hija|Padre\/Madre|Hermano\/Hermana|Otro)$'
              example: "Padre/Madre"
            insured_pays:
              type: boolean
              description: 'Indicate `true` if the insured pays the premiums, otherwise `false`.'
            other_nationality_residence:
              type: boolean
              description: 'Indicate `true` if the insured has another nationality or residence, otherwise `false`.'
            other_nationality_residence_details:
              type: string
              description: Specify the country if `other_nationality_residence` is `true`. List of countries.
              maxLength: 50
              pattern: '^[A-Za-zÁÉÍÓÚáéíóúÑñ\s,]{1,50}$'
              example: "Canadá"
            pays_taxes_in_other_country:
              type: boolean
              description: 'Indicate `true` if the insured pays taxes in another country, otherwise `false`.'
            pays_taxes_in_other_country_details:
              type: string
              description: Specify the country if `pays_taxes_in_other_country` is `true`. List of countries.
              maxLength: 50
              pattern: '^[A-Za-zÁÉÍÓÚáéíóúÑñ\s,]{1,50}$'
              example: "Estados Unidos"
            insured_government_position:
              type: boolean
              description: 'Indicate `true` if the insured holds or has held a government position, otherwise `false`.'
            relatives_government_position:
              type: boolean
              description: 'Indicate `true` if the insured has close relatives with government positions, otherwise `false`.'
            insured_natural_person:
              type: boolean
              description: 'Indicate `true` if the insured is an individual with business activities, otherwise `false`.'
            insured_commercial_ties:
              type: boolean
              description: 'Indicate `true` if the insured has commercial ties in other countries, otherwise `false`.'
            insured_commercial_ties_country:
              type: string
              description: Specify the country or countries if `insured_commercial_ties` is `true`. Maximum 100 characters.
              maxLength: 100
              pattern: '^[A-Za-zÁÉÍÓÚáéíóúÑñ\s,]{1,100}$'
              example: "Brasil, Argentina"
            other_nationality_residence_contractor:
              type: boolean
              description: 'Indicate `true` if the contractor has another nationality or residence, otherwise `false`.'
            other_nationality_residence_contractor_details:
              type: string
              description: Specify the country if `other_nationality_residence_contractor` is `true`. Maximum 50 characters.
              maxLength: 50
              pattern: '^[A-Za-zÁÉÍÓÚáéíóúÑñ\s]{1,50}$'
              example: "Francia"
            pays_taxes_in_other_country_contractor:
              type: boolean
              description: 'Indicate `true` if the contractor pays taxes in another country, otherwise `false`.'
            pays_taxes_in_other_country_contractor_details:
              type: string
              description: Specify the country if `pays_taxes_in_other_country_contractor` is `true`. Maximum 50 characters.
              maxLength: 50
              pattern: '^[A-Za-zÁÉÍÓÚáéíóúÑñ\s]{1,50}$'
              example: "Alemania"
            contractor_government_position:
              type: boolean
              description: 'Indicate `true` if the contractor holds or has held a government position, otherwise `false`.'
            contractor_relatives_government_position:
              type: boolean
              description: 'Indicate `true` if the contractor has close relatives with government positions, otherwise `false`.'
            contractor_natural_person:
              type: boolean
              description: 'Indicate `true` if the contractor is an individual with business activities, otherwise `false`.'
            contractor_commercial_ties:
              type: boolean
              description: 'Indicate `true` if the contractor has commercial ties in other countries, otherwise `false`.'
            contractor_commercial_ties_country:
              type: string
              description: Specify the country or countries if `contractor_commercial_ties` is `true`. Maximum 100 characters.
              maxLength: 100
              pattern: '^[A-Za-zÁÉÍÓÚáéíóúÑñ\s,]{1,100}$'
              example: "Chile, Perú"
            signed_declaration:
              type: boolean
              description: Must be checked to confirm acting on one's own behalf.
            accepted_privacy_notice:
              type: boolean
              description: Must be checked to continue.
            accepted_terms_conditions:
              type: boolean
              description: Must be checked to continue.
            relatives_government_positions_attributes:
              type: array
              description: 'An array of government positions associated with the insured or contractor.'
              items:
                type: object
                required:
                  - position
                  - department
                  - role
                properties:
                  name:
                    type: string
                    description: Specify the name if applicable. Maximum 50 characters.
                    maxLength: 50
                    pattern: '^[A-Za-zÁÉÍÓÚáéíóúÑñ\s]{1,50}$'
                    example: "Carlos Gómez"
                  relationship:
                    type: string
                    description: 'Select the relationship with the relative. Options: Cónyuge, Hijo/Hija, Padre/Madre, Hermano/Hermana, Otro.'
                    pattern: '^(Cónyuge|Hijo\/Hija|Padre\/Madre|Hermano\/Hermana|Otro)$'
                    example: "Cónyuge"
                  position:
                    type: string
                    description: Specify the position held. Maximum 100 characters.
                    maxLength: 100
                    pattern: '^[A-Za-zÁÉÍÓÚáéíóúÑñ\s]{1,100}$'
                    example: "Ministro de Economía"
                  department:
                    type: string
                    description: Specify the government department. Maximum 100 characters.
                    maxLength: 100
                    pattern: '^[A-Za-zÁÉÍÓÚáéíóúÑñ\s]{1,100}$'
                    example: "Secretaría de Economía"
                  role:
                    type: string
                    description: 'Role indicating the type of government position. Allowed values: "insured", "relative", "contractor", "contractor_relative".'
                    enum:
                      - insured
                      - relative
                      - contractor
                      - contractor_relative
                    pattern: '^(insured|relative|contractor|contractor_relative)$'
                    example: "contractor_relative"
      x-stoplight:
        id: yxxxxxx
    BillingDataJSON:
      type: object
      required:
        - amount
        - policy_folio
        - cardholder
        - card_number
        - expiration_month
        - expiration_year
        - cvv
      properties:
        amount:
          type: number
          description: 'The total amount to be billed, including the premium and any additional charges.'
        policy_folio:
          type: integer
          description: The policy number being billed.
        cardholder:
          type: string
          description: Nombre tal como aparece en la tarjeta. Máximo 50 caracteres.
          maxLength: 50
          pattern: '^[A-Za-zÁÉÍÓÚáéíóúÑñ\s]{1,50}$'
          example: RODRIGO PEREZ
        card_number:
          type: string
          description: Número de tarjeta de crédito/débito. Entre 13 y 19 dígitos. Sin espacios ni guiones.
          pattern: '^\d{13,19}$'
          example: '4111111111111111'
        expiration_month:
          type: string
          description: Mes de expiración en formato MM. Valores entre 01 y 12.
          pattern: '^(0[1-9]|1[0-2])$'
          example: '08'
        expiration_year:
          type: string
          description: Año de expiración en formato AA. Año actual o futuro.
          pattern: '^\d{2}$'
          example: '25'
        cvv:
          type: string
          description: Código de seguridad de 3 o 4 dígitos según el tipo de tarjeta.
          pattern: '^\d{3,4}$'
          example: '123'
        pay_without_interest:
          type: boolean
          description: 'SOLO SI ES PLAN PREMIUM ANUAL. Indicate `true` to pay in 12 months without interest, otherwise `false`.'
        issuing_bank:
          type: string
          description: Seleccionar el banco emisor de la tarjeta.
          enum:
            - BANCOMER
            - BBVA
            - SANTANDER
            - HSBC
            - OTHER
          example: BANCOMER
      x-stoplight:
        id: eb4bkm223erxl
    ErrorJSON:
      type: object
      properties:
        status:
          type: boolean
          description: Indicates success (`true`) or failure (`false`).
        message:
          type: string
          description: A descriptive error message.
          pattern: '^.{1,255}$'
      required:
        - status
        - message
      x-stoplight:
        id: bkgs5fekdvz8n
    OccupationJSON:
      type: object
      properties:
        argos_occupation_id:
          type: integer
          description: Argos Occupation ID
        description:
          type: string
          description: Occupation description
          pattern: '^[A-Za-zÁÉÍÓÚáéíóúÑñ\s]{1,100}$'
        risk:
          type: string
          description: Occupation risk level
          enum:
            - NORMAL
            - SUBNORMAL
          pattern: '^(NORMAL|SUBNORMAL)$'
      x-stoplight:
        id: occupation-schema
    OptionJSON:
      type: object
      properties:
        id:
          type: string
          description: The display name of the option.
          pattern: '^[A-Za-z0-9\-]{1,50}$'
        value:
          type: string
          description: 'The value to be sent or selected, if applicable.'
          pattern: '^[A-Za-z0-9\-]{1,50}$'
      x-stoplight:
        id: option-schema
    BillingResponseJSON:
      type: object
      properties:
        acceptance:
          type: string
          description: Operation acceptance code.
          pattern: '^[A-Za-z0-9]{1,50}$'
        authorization:
          type: string
          description: Operation authorization code.
          pattern: '^[A-Za-z0-9]{1,50}$'
        status:
          type: object
          properties:
            status:
              type: boolean
              description: Indicates whether the operation was successful.
            message:
              type: string
              description: Detailed message of the operation status.
              pattern: '^.{1,255}$'
            error_type:
              type: string
              description: 'Type of error that occurred, if applicable.'
              pattern: '^[A-Za-z0-9\-]{0,50}$'
          required:
            - status
        amount_charged:
          type: number
          format: float
          description: Total amount charged in the operation.
        operation:
          type: string
          description: Operation code or description.
          pattern: '^[A-Za-z0-9\s\-]{1,100}$'
        reference:
          type: string
          description: Operation reference.
          pattern: '^[A-Za-z0-9\-]{1,100}$'
        card:
          type: string
          description: Card number involved in the operation.
          pattern: '^\d{13,19}$'
      x-stoplight:
        id: billing-response-schema
    GetPlansResponse:
      type: object
      properties:
        plans:
          type: array
          items:
            $ref: '#/components/schemas/Plan'
    Plan:
      type: object
      properties:
        id:
          type: string
          example: '001'
          pattern: '^\d{3}$'
        product_name:
          type: string
          example: BASIC_001
        full_name:
          type: string
          example: Basico
          pattern: '^[A-Za-zÁÉÍÓÚáéíóúÑñ\s]{1,50}$'
        payment_methods:
          type: array
          items:
            $ref: '#/components/schemas/Premium'
        coverages:
          type: array
          items:
            $ref: '#/components/schemas/Coverage'
    Premium:
      type: object
      properties:
        payment_method:
          type: string
          example: MENSUAL
        premium:
          type: number
          example: 250
    Coverage:
      type: object
      properties:
        name:
          type: string
          example: Health
          pattern: '^[A-Za-zÁÉÍÓÚáéíóúÑñ\s]{1,100}$'
        insured_amount:
          type: number
          example: 50000
    PostalCodeLookupResponseJSON:
      type: object
      required:
        - municipality
        - city
        - state_address
        - country
        - neighborhoods
      properties:
        municipality:
          type: string
          description: The municipality corresponding to the postal code.
          pattern: '^[A-Za-zÁÉÍÓÚáéíóúÑñ\s]{1,100}$'
          example: Nezahualcoyotl
        city:
          type: string
          description: The city corresponding to the postal code.
          pattern: '^[A-Za-zÁÉÍÓÚáéíóúÑñ\s]{1,100}$'
          example: Nezahualcoyotl
        state_address:
          type: string
          description: The state corresponding to the postal code.
          pattern: '^[A-Za-zÁÉÍÓÚáéíóúÑñ\s]{1,100}$'
          example: Mexico
        country:
          type: string
          description: The country corresponding to the postal code.
          pattern: '^[A-Za-zÁÉÍÓÚáéíóúÑñ\s]{1,100}$'
          example: Mexico
        neighborhoods:
          type: array
          description: An array of neighborhoods associated with the postal code.
          items:
            type: string
            pattern: '^[A-Za-zÁÉÍÓÚáéíóúÑñ\s]{1,100}$'
            example: Benito Juarez
    ProcessPolicyResponse:
      type: object
      properties:
        policy_folio:
          type: integer
          description: The folio number of the processed policy.
      required:
        - policy_folio
